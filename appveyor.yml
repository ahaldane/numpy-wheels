# vim ft=yaml
# CI on Windows via appveyor
# Largely from:
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

os: Visual Studio 2015

environment:
    global:
      MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
      MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin
      OPENBLAS_32: https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com/openblas-5f998ef_gcc7_1_0_win32.zip
      OPENBLAS_64: https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com/openblas-5f998ef_gcc7_1_0_win64.zip
      OPENBLAS_32_SHA256: 0a12804b08d475179a0411936f509b44d7512f084b4a81c2fa3abe8c9ac4ee09
      OPENBLAS_64_SHA256: 8f11d8a5a79795a3a1ccb2326c979a0ca426e623eee93f8e35239e3c21e62cd6
      BUILD_COMMIT: v1.13.0rc2
      OPENBLAS_COMMIT: 5f998ef_mingwpy
      OPENBLAS_ROOT: c:\opt
      WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      WHEELHOUSE_UPLOADER_SECRET:
        secure:
            9s0gdDGnNnTt7hvyNpn0/ZzOMGPdwPp2SewFTfGzYk7uI+rdAN9rFq2D1gAP4NQh
      DAILY_COMMIT: 77c873d

    matrix:

    - PYTHON: "C:\\Python27"
    # PYTHON: "C:\\Python27-x64"
    # PYTHON: "C:\\Python34"
    # PYTHON: "C:\\Python34-x64"
    # PYTHON: "C:\\Python35"
    # PYTHON: "C:\\Python35-x64"
    # PYTHON: "C:\\Python36"
    # PYTHON: "C:\\Python36-x64"

install:
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq "daily") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
        $env:NPY_RELAXED_STRIDES_DEBUG = 1
      } else {
        $env:CONTAINER = "wheels"
        $env:UPLOAD_ARGS = "--no-update-index"
      }
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"

  # Get needed submodules
  - git submodule update --init

  # Install Python 3.6.2 if necessary
  - ps: .\windows-wheel-builder\install_python362.ps1

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%

  # Get Python bitness
  # https://stackoverflow.com/questions/1746475/windows-batch-help-in-setting-a-variable-from-command-output#4509885
  - set PY_CMD=python -c "import platform; print(platform.architecture()[0][:2])"
  - for /f "tokens=1 delims=" %%i in ('%PY_CMD%') do set PYTHON_ARCH=%%i

  # Fix MSVC builds for 64-bit Python
  # See
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # Install requirements
  - pip install -r windows-wheel-builder\requirements.txt
  - python -m pip install --upgrade pip
  # Pin wheel to 0.26 to avoid Windows ABI tag for built wheel
  - pip install wheel==0.26
  - pip install "cython>=0.25"
  # Download and install static "openblas.a" to PYTHON\lib
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      $PYTHON = $env:PYTHON
      If ($PYTHON_ARCH -eq 32) {
          $OPENBLAS = $env:OPENBLAS_32
          $OPENBLAS_SHA256 = $env:OPENBLAS_32_SHA256
      } Else {
          $OPENBLAS = $env:OPENBLAS_64
          $OPENBLAS_SHA256 = $env:OPENBLAS_64_SHA256
      }
      $clnt = new-object System.Net.WebClient
      $file = "$(New-TemporaryFile).zip"
      $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
      $destination = "$PYTHON\lib\openblas.lib"

      echo $file
      echo $tmpdir
      echo $OPENBLAS

      $clnt.DownloadFile($OPENBLAS,$file)

      $downloaded_hash = Get-FileHash -Algorithm SHA256 $file
      if ($downloaded_hash.hash -ne $OPENBLAS_SHA256) {
          $downloaded_hash | Format-List
          echo $OPENBLAS_SHA256
          throw "Downloaded OPENBLAS zip SHA256 does not match."
      }

      Expand-Archive $file $tmpdir

      rm $tmpdir\$PYTHON_ARCH\lib\*.dll.a
      $lib = ls $tmpdir\$PYTHON_ARCH\lib\*.a | ForEach { ls $_ } | Select-Object -first 1
      echo $lib

      cp $lib $destination
      ls $destination

build_script:
  # Build and install the wheel
  - cd numpy
  - git checkout %BUILD_COMMIT%
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32
      } Else {
          $MINGW = $env:MINGW_64
      }
      $env:Path += ";$MINGW"
      $env:NPY_NUM_BUILD_JOBS = "4"
  - python setup.py bdist_wheel
  - cd dist
  - pip install --pre --no-index -f . numpy
  - pip install nose

test_script:
  # Run the project tests
  - python -c "import numpy; numpy.test(verbose=3)"
  - cd ..

after_test:
  # If tests are successful, create binary packages for the project.
  - dir dist

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: numpy\dist\*.*

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - pip install wheelhouse-uploader
  - python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=dist
    %UPLOAD_ARGS%
    %CONTAINER%
